function git-new-remote-tracking {
  git checkout -b $1 && git push -u origin $1
}

function git_branch_name {
  val=`git branch 2>/dev/null | grep '^*' | colrm 1 2`
    echo "$val"
}

function git-done {
  branch=`git_branch_name`
    git checkout master && git merge $branch --ff-only && bundle install && rake db:migrate db:test:prepare && rake && git push && git branch -D $branch && git push origin :$branch
}

function git-nuke {
  git branch -D $1 && git push origin :$1
}

function git-on-master {
  branch=`git_branch_name`
    git checkout master && git pull --rebase 
    git checkout $branch
    git rebase master
}

function g {
  if [[ $# > 0 ]]; then
    git $@
  else
    git status
  fi
}
compdef g=git

function rrg {
  rake routes | grep $1
}

function take {
  mkdir $1
  cd $1
}

function colors {
  for i in {0..255} ; do
    printf "\x1b[38;5;${i}mcolour${i} "
  done
}

function renamer {
  if [ -z "$1" ]; then
    echo "pass current extension followed by the new one without dots"
  else 
    for file in *.$1; do
      mv "$file" "`basename $file .$1`.$2"
    done
  fi
}

function remaining_hours_old {
  if [ -z "$1" ]; then
    echo "pass the mp3 files"
  else
    mp3info -p "%S\n" $@ | awk '{s+=$1}END{print s/60/60}'
  fi
}

function convert_raw_to_jpg {
  mkdir -p output 2> /dev/null
  find . -type f -iname '*.CR2' -print0 | \
    xargs -0 -n 1 -P 2 -I {} \
    /usr/local/bin/convert -verbose -units PixelsPerInch cr8:{} \
    -colorspace sRGB -resize 2560x2650 -set filename:new '%t' \
    -density 72 -format JPG -quality 80 'output/%[filename:new].jpg'
}

function remaining_hours {
  if [ -z "$1" ]; then
    echo "pass the video/audio files"
  else
    find . -maxdepth 1 -iname $1 -exec ffprobe -v quiet -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 {} \; | awk '{s+=$1}END{print s/60/60}'
  fi
}

function grb {
  if [ -z "$1" ]; then
    echo "pass branch"
  else
    start=`date +%s`

    git checkout next-release
    git pull origin next-release
    git checkout $1
    git fetch
    git reset --hard origin/$1
    git rebase next-release && push_and_track $1

    end=`date +%s`
    runtime=$((end-start))
    echo 'runtime'
    echo $runtime
  fi
}

function push_and_track {
  if [ -z "$1" ]; then
      echo "pass branch"
  elif [ -z "$2" ]; then
      echo "pass token"
  else
    git push origin $1:$1 --force
    response="waiting"
    while [ "$response" != '"success"' ]; do
      sleep 10
      printf .
      response=$(curl -H "Authorization: token $2" -H "Accept: application/vnd.github.antiope-preview+json" https://api.github.com/repos/td-berlin/td_pulse/commits/$1/check-runs --silent | jq '.check_runs[0].conclusion')
    done
    echo '\ndone'
    say 'done'
    osascript -e 'display notification "done"'
  fi
}
